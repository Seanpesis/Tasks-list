#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 10
#define MAX_TASK_LENGTH 50

struct Task {
    char description[MAX_TASK_LENGTH];
    int completed;
};

struct Task tasks[MAX_TASKS];
int num_tasks = 0;

// Function to add a new task
void add_task(const char* description) {
    if (num_tasks < MAX_TASKS) {
        strcpy(tasks[num_tasks].description, description);
        tasks[num_tasks].completed = 0;
        num_tasks++;
        printf("Task added successfully!\n");
    }
    else {
        printf("Task list is full. Cannot add more tasks.\n");
    }
}

// Function to view all tasks
void view_tasks() {
    printf("Task List:\n");
    for (int i = 0; i < num_tasks; i++) {
        printf("%d. %s - %s\n", i + 1, tasks[i].description, tasks[i].completed ? "Completed" : "Incomplete");
    }
}

// Function to mark a task as completed
void complete_task(int index) {
    if (index >= 1 && index <= num_tasks) {
        tasks[index - 1].completed = 1;
        printf("Task marked as completed!\n");
    }
    else {
        printf("Invalid task index.\n");
    }
}

// Function to delete a task
void delete_task(int index) {
    if (index >= 1 && index <= num_tasks) {
        for (int i = index - 1; i < num_tasks - 1; i++) {
            strcpy(tasks[i].description, tasks[i + 1].description);
            tasks[i].completed = tasks[i + 1].completed;
        }
        num_tasks--;
        printf("Task deleted successfully!\n");
    }
    else {
        printf("Invalid task index.\n");
    }
}

int main() {
    int choice, task_index;
    char description[MAX_TASK_LENGTH];

    do {
        printf("\nTask Manager\n");
        printf("1. Add Task\n");
        printf("2. View Tasks\n");
        printf("3. Complete Task\n");
        printf("4. Delete Task\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf_s("%d", &choice);

        switch (choice) {
        case 1:
            printf("Enter task description: ");
            getchar(); // Clearing the input buffer
            fgets(description, sizeof(description), stdin);
            description[strcspn(description, "\n")] = 0; // Removing trailing newline
            add_task(description);
            break;
        case 2:
            view_tasks();
            break;
        case 3:
            printf("Enter index of task to mark as completed: ");
            scanf_s("%d", &task_index);
            complete_task(task_index);
            break;
        case 4:
            printf("Enter index of task to delete: ");
            scanf_s("%d", &task_index);
            delete_task(task_index);
            break;
        case 5:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}
